---
description: 
globs: 
alwaysApply: true
---
# Swift Boilerplate Theme System

This document outlines all the available theme components in the Swift Boilerplate project. All theme files are located in the `Theme/` directory.

## üé® Colors (Auto-Generated from `Assets.xcassets`)

### How It Works üöÄ
**NEW:** Colors are automatically generated by Xcode from your `Assets.xcassets` color sets! No need for a separate `Colors.swift` file.

- Each `.colorset` in Assets.xcassets becomes a `Color` property
- `"BackgroundPrimary.colorset"` ‚Üí `Color.backgroundPrimary`
- `"TextPrimary.colorset"` ‚Üí `Color.textPrimary`
- Supports both light and dark mode automatically!

### Available Colors
All colors are accessible via `Color.colorName` syntax and are defined in the Assets.xcassets color sets.

#### Accent Colors
- `Color.accentColor` - Primary brand color for highlights and CTAs

#### Background Colors
- `Color.backgroundPrimary` - Main background surfaces
- `Color.backgroundSecondary` - Secondary background surfaces

#### UI Elements
- `Color.border` - Border colors for UI elements
- `Color.divider` - Divider lines and separators
- `Color.shadow` - Shadow colors

#### Status Colors
- `Color.error` - Error states and destructive actions
- `Color.success` - Success states and confirmations
- `Color.warning` - Warning states and cautions

#### Primary Colors
- `Color.primary` - Main brand color
- `Color.primaryVariant` - Variant of the main brand color

#### Text Colors
- `Color.textPrimary` - Primary text color for maximum readability
- `Color.textSecondary` - Secondary text color for less prominent text

### Usage Examples
```swift
// Text styling
Text("Welcome!")
    .foregroundColor(.textPrimary)
    .background(.backgroundSecondary)

// Button styling
Button("Save") { }
    .foregroundColor(.white)
    .background(.primary)

// Status indicators
Text("Error occurred")
    .foregroundColor(.error)

Text("Success!")
    .foregroundColor(.success)
```

### Color Customization üé®
To change colors:
1. Open `Assets.xcassets` in Xcode
2. Select the colorset to modify (e.g., "Primary")
3. Click the color well to open Color Picker
4. Choose your new color
5. Set "Any Appearance" for light mode, "Dark" for dark mode
6. Changes apply automatically throughout the app!

### Dark Mode Support üåô
- All colors support dark mode through Assets.xcassets
- Set different colors for "Any Appearance" and "Dark"
- SwiftUI handles the switching automatically

### Color Accessibility ‚ôø
- Always test contrast ratios (4.5:1 minimum for normal text)
- Use semantic naming (`.textPrimary` vs `.black`)
- Test in both light and dark modes
- Consider colorblind users with sufficient contrast

## üìù Fonts (`Theme/Fonts.swift`)

### Available Font Categories

#### Display Fonts (36-28pt) - Large titles
- `Font.displayLarge` (36pt, bold)
- `Font.displayMedium` (32pt, bold)
- `Font.displaySmall` (28pt, bold)

#### Title Fonts (24-20pt) - Section headers
- `Font.titleLarge` (24pt, bold)
- `Font.titleMedium` (22pt, semibold)
- `Font.titleSmall` (20pt, semibold)

#### Headline Fonts (18-16pt) - Subsection headers
- `Font.headlineLarge` (18pt, semibold)
- `Font.headlineMedium` (17pt, semibold)
- `Font.headlineSmall` (16pt, medium)

#### Body Fonts (17-15pt) - Main content
- `Font.bodyLarge` (17pt, regular)
- `Font.bodyMedium` (16pt, regular)
- `Font.bodySmall` (15pt, regular)

#### Label Fonts (14-12pt) - Form labels and UI
- `Font.labelLarge` (14pt, medium)
- `Font.labelMedium` (13pt, medium)
- `Font.labelSmall` (12pt, medium)

#### Caption Fonts (12-10pt) - Supplementary info
- `Font.captionLarge` (12pt, regular)
- `Font.captionMedium` (11pt, regular)
- `Font.captionSmall` (10pt, regular)

#### Button Fonts (18-14pt) - Interactive elements
- `Font.buttonLarge` (18pt, semibold)
- `Font.buttonMedium` (16pt, medium)
- `Font.buttonSmall` (14pt, medium)

#### Specialized Fonts
- `Font.navigationTitle` (20pt, semibold)
- `Font.tabBarItem` (12pt, medium)
- `Font.footnote` (11pt, regular)
- `Font.overline` (10pt, medium, small caps)

#### Monospaced Fonts (16-12pt) - Code and numbers
- `Font.codeLarge` (16pt, regular, monospaced)
- `Font.codeMedium` (14pt, regular, monospaced)
- `Font.codeSmall` (12pt, regular, monospaced)

#### Rounded Fonts (18-14pt) - Friendly UI
- `Font.roundedLarge` (18pt, semibold, rounded)
- `Font.roundedMedium` (16pt, medium, rounded)
- `Font.roundedSmall` (14pt, medium, rounded)

### Font Reference
- **Weights**: `.ultraLight`, `.thin`, `.light`, `.regular`, `.medium`, `.semibold`, `.bold`, `.heavy`, `.black`
- **Designs**: `.default` (San Francisco), `.rounded`, `.monospaced`, `.serif` (New York)

### Usage Examples
```swift
Text("Welcome")
    .font(.displayLarge)

Text("Section Title")
    .font(.titleMedium)

Text("Body content")
    .font(.bodyMedium)
```

## üéØ Button Styles (`Theme/buttonStyles.swift`)

### Available Button Styles

#### Primary Styles
- `.primary` - Main action buttons with accent color background
- `.secondary` - Outline style for secondary actions
- `.large` - Bigger buttons for important actions
- `.small` - Compact buttons for tight spaces

#### Icon Buttons
- `.icon` - Standard 44pt circular button (perfect touch target)
- `.iconSmall` - 32pt for compact areas
- `.iconLarge` - 56pt for prominent actions

#### Specialized Styles
- `.destructive` - Red buttons for delete/warning actions using `.error` color
- `.ghost` - Minimal style with no background

### Button Features
- ‚úÖ Scale animations on press (0.95x for regular, 0.9x for icons)
- ‚úÖ Smooth easeInOut transitions
- ‚úÖ Uses theme color and font systems
- ‚úÖ Consistent padding and corner radius
- ‚úÖ Accessibility-compliant touch targets

### Usage Examples
```swift
// Primary action
Button("Save Changes") { }
    .buttonStyle(.primary)

// Secondary action
Button("Cancel") { }
    .buttonStyle(.secondary)

// Icon button
Button { } label: { 
    Image(systemName: "heart.fill") 
}.buttonStyle(.iconSmall)

// Destructive action
Button("Delete") { }
    .buttonStyle(.destructive)

// Large prominent button
Button("Get Started") { }
    .buttonStyle(.large)
```

## üèóÔ∏è Theme Architecture

### File Structure
```
Theme/
‚îú‚îÄ‚îÄ Fonts.swift       - Font system with comprehensive options
‚îî‚îÄ‚îÄ buttonStyles.swift - Button style system

Assets.xcassets/
‚îú‚îÄ‚îÄ AccentColor.colorset/
‚îú‚îÄ‚îÄ BackgroundPrimary.colorset/
‚îú‚îÄ‚îÄ BackgroundSecondary.colorset/
‚îú‚îÄ‚îÄ Border.colorset/
‚îú‚îÄ‚îÄ Divider.colorset/
‚îú‚îÄ‚îÄ Error.colorset/
‚îú‚îÄ‚îÄ Primary.colorset/
‚îú‚îÄ‚îÄ PrimaryVariant.colorset/
‚îú‚îÄ‚îÄ Shadow.colorset/
‚îú‚îÄ‚îÄ Success.colorset/
‚îú‚îÄ‚îÄ TextPrimary.colorset/
‚îú‚îÄ‚îÄ TextSecondary.colorset/
‚îî‚îÄ‚îÄ Warning.colorset/
```

### Design Principles
- **Auto-generated colors** from Assets.xcassets (no manual declarations needed)
- **Semantic naming** over literal values
- **Consistent sizing** following iOS HIG
- **Accessibility first** design
- **Dark mode support** through Assets.xcassets
- **Novice-friendly** with clear documentation
- **Extension-based** for easy autocomplete

### Best Practices
1. Always use semantic colors (`.textPrimary` vs `.black`)
2. Test contrast ratios (4.5:1 minimum)
3. Support both light and dark modes
4. Use appropriate font weights for hierarchy
5. Maintain consistent button sizing
6. Follow iOS Human Interface Guidelines
7. **NEW:** Let Xcode auto-generate colors - don't create manual Color extensions

### For Novice Coders üöÄ
- Colors work automatically from Assets.xcassets - no coding required!
- Focus on semantic naming (what the color represents)
- Test your app in both light and dark modes regularly
- Use the predefined colors - they're already optimized for accessibility

This theme system provides a complete foundation for consistent, accessible, and beautiful UI throughout the app.
